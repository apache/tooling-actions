---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: "Upload to ATR using GitHub OIDC and rsync"
description: "Create a GitHub OIDC JWT, register an SSH key, then rsync a directory to ATR."
branding: {icon: upload-cloud, color: blue}

inputs:
  asf-uid: {description: "ASF UID", required: true}
  project: {description: "Project", required: true}
  version: {description: "Version", required: true}
  src: {description: "Local directory", default: "dist"}
  atr-host: {description: "ATR host", default: "release-test.apache.org"}
  ssh-port: {description: "SSH port", default: "2222"}

runs:
  using: "composite"
  steps:
    - name: Create a GitHub OIDC JWT
      id: create-github-jwt
      shell: bash
      run: |
        set -euo pipefail
        url="${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=atr-test-v1"
        jwt="$(curl -sS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "$url" \
             | python3 -c 'import json, sys; print(json.load(sys.stdin)["value"])')"
        echo "::add-mask::$jwt"
        echo "jwt=$jwt" >> "$GITHUB_OUTPUT"

    - name: Generate an ephemeral SSH key
      id: generate-ssh-key
      shell: bash
      run: |
        set -euxo pipefail
        ssh-keygen -t ed25519 -N "" -f "$RUNNER_TEMP/ssh_key"
        echo "ssh_private_key_path=$RUNNER_TEMP/ssh_key" >> "$GITHUB_OUTPUT"
        echo "ssh_public_key=$(cat "$RUNNER_TEMP/ssh_key.pub")" >> "$GITHUB_OUTPUT"

    - name: Register the ephemeral SSH key with ATR
      shell: bash
      run: |
        set -euxo pipefail
        jq -n --arg publisher github \
              --arg jwt "$JWT" \
              --arg key "$SSH_PUBLIC_KEY" \
              '{publisher:$publisher, jwt:$jwt, ssh_key:$key}' |
          curl -sS -X POST -H 'Content-Type: application/json' \
            -d @- "https://${INPUTS_ATR_HOST}/api/publisher/ssh/register"
      env:
        INPUTS_ATR_HOST: ${{ inputs.atr-host }}
        JWT: ${{ steps.create-github-jwt.outputs.jwt }}
        SSH_PUBLIC_KEY: ${{ steps.generate-ssh-key.outputs.ssh_public_key }}

    - name: Upload to ATR using rsync
      shell: bash
      run: |
        set -euxo pipefail
        command -v rsync > /dev/null || { sudo apt-get update -y && sudo apt-get install -y rsync; }
        src="${INPUTS_SRC}"
        case "$src" in */) ;; *) src="$src/";; esac
        rsync -av \
          -e "ssh -p ${INPUTS_SSH_PORT} -i $SSH_PRIVATE_KEY_PATH -o StrictHostKeyChecking=accept-new" \
          "$src" "${INPUTS_ASF_UID}@${INPUTS_ATR_HOST}:/${INPUTS_PROJECT}/${INPUTS_VERSION}/"
      env:
        INPUTS_SRC: ${{ inputs.src }}
        INPUTS_SSH_PORT: ${{ inputs.ssh-port }}
        INPUTS_ASF_UID: ${{ inputs.asf-uid }}
        INPUTS_ATR_HOST: ${{ inputs.atr-host }}
        INPUTS_PROJECT: ${{ inputs.project }}
        INPUTS_VERSION: ${{ inputs.version }}
        SSH_PRIVATE_KEY_PATH: ${{ steps.generate-ssh-key.outputs.ssh_private_key_path }}
